#lang sicp
(#%require "helpers.rkt")

(define (=number? x y)
  (and (number? x) (= x y)))
(define (variable? x) (symbol? x))
(define (same-variable? x y) (eq? x y))
(define (make-sum x y)
  (cond
    ((=number? y 0) x)
    ((=number? x 0) y)
    ((and (number? x) (number? y)) (+ x y))
    (else (list '+ x y))))
(define (make-product x y)
  (cond
    ((or (=number? x 0) (=number? y 0)) 0)
    ((=number? x 1) y)
    ((=number? y 1) x)
    ((and (number? x) (number? y)) (* x y))
    (else (list '* x y))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (addend x) (cadr x))
(define (augend x) (caddr x))
(define (multiplier x) (cadr x))
(define (multiplicand x) (caddr x))
(define (base x) (cadr x))
(define (exponent x) (caddr x))
(define (make-exp base exp)
  (cond
    ((=number? exp 0) 1)
    ((=number? exp 1) base)
    ((and (number? base) (number? exp)) (expt base exp))
    (else (list '** base exp))))
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (deriv exp var)
  (cond
    ((number? exp) 0)
    ((variable? exp)
      (if (same-variable? exp var) 1 0))
    ((sum? exp)
      (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))
    ((product? exp)
      (make-sum
        (make-product (multiplier exp) (deriv (multiplicand exp) var))
        (make-product (multiplicand exp) (deriv (multiplier exp) var))))
    ((exponentiation? exp)
      (make-product
        (exponent exp)
        (make-product
          (make-exp (base exp) (- (exponent exp) 1))
          (deriv (base exp) var))))
    (else
      (error "unknown expression type -- DERIV" exp))))

(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(log (deriv '(* (* x y) (+ x 3)) 'x))
(deriv '(** x 0) 'x)
(deriv '(** x 1) 'x)
(log (deriv '(** x 2) 'x))
(log (deriv '(** x 6) 'x))
