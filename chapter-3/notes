'To a large extent, then, the way we organize a large program is dictated by our
perception of the system to be modeled.'

two organizational strategies
  objects - system is a collection of distinct objects whose behaviors
    may change
  streams - information flow in the system

how a computational object can change and maintain its identity?
  this forces us to abandon the substitution model and replace it
  with an environment model

'The difficulties of dealing with objects, change, and identity are a fundamental
consequence of the need to grapple with time in our computational models.'

if nothing changes, then the notion of time is unnecessary

What is state?
  an object is said to 'have state' if its behaviour is influenced by its history

'A language that supports the concept that "equals can be substituted for equals"
in an expression without changing the value of the expression is said to be
referentially transparent.'

side effect - a bug that occurs when we forget that a change to an object may
  also change a "different" object having just a different name

imperative programming - a style that makes extensive use of assignment

'In general, programming with assignment forces us to carefully consider the relative orders
of the assignments to make sure that each statement is using the correct version
of the variables that have been changed. This issue simply does not arise in
functional programs.'

The environment model of evaluation
===================================

To evaluate a combination:
1. Evaluate the subexpressions of the combination.
2. Apply the value of the operator subexpression to the values of the operand
   subexpressions

procedure - a pair (code, pointer to an environment) created by evaluating
  a lambda expression relative to a given environment.

To apply a procedure to arguments:
1. Create a new environment containing a frame that binds the parameters to
   the values of arguments. The enclosing environment of this frame is the
   environment specified by the procedure.
2. Evaluate the procedure body within the newly created environment.

define
Defining a symbol using `define` creates a binding in the current environment
frame and assigns to the symbol the indicated value.

set!
(set! <var> <val>) in some environment changes the binding of the var variable to
indicate the new value in the first frame in the environment that contains var.
If the variable is unbound, set! signals an error.

This simple model provides a correct description of how the interpreter evaluates
expressions.

Modelling with mutable data
===========================

Lisp memory management systems include garbage collector.

In Scheme there is a unique symbol with any given name. When we compare (eq? 'a 'a),
we just check whether the arguments are the same pointers.

In most Lisp implementations pointers are just memory addresses.

3.27
http://www.yccsml.com/post/scheme/2017-03-18-1


Concurrency
===========================

barrier synchronization
  synchronization
  EIEIO

Lamport 1978
  global clocks

streams
===========================
